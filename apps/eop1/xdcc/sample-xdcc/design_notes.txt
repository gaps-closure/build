// ----------------------------------------------------
// Unpartitioned
// ----------------------------------------------------

// There will be separate versions of each <func>_<MSG>() for each MSG such as updateMissionPlan, pnt, etc.
// These provide separate code paths for each MSG suitable for CLE annotation
// After partitioning echo_MSG will be distributed between the two enclaves, and may be RPC wrapped
// non_local(MSG) will always return false in unpartitioned program, but will return true for some in partitioned program

#define non_local(X) false

echo_MSG(m) 
  amqlib_publish(MSG,m)

egress_MSG(m)
  if non_local(MSG) 
     echo_MSG(m) 

master_thread_MSG()
  setup_xdc_publisher_MSG()             // pubsocket
  setup_amq_listener_MSG(egress_MSG)    // amqlib_create, amqlib_listen

main:
  foreach MSG in all_message_list: 
    thread(master_thread_MSG)

  // housekeep before exit
  upon thread-join of each thread
    amqlib_destroy
    xdc_close 
    ...

// ----------------------------------------------------
// Partitioned 
// ----------------------------------------------------

// echo_MSG will be distributed to master and slave
// for non_local
//    master receives from AMQ broker and relays to XDC peer (RPC over diode)
//    echo_MSG becomes _rpc_echo_MSG

// ----------------------------------------------------
// Master 
// ----------------------------------------------------

// #undef non_local(MSG) 
// non_local(MSG) function is autogenerated, will return true for remote messages

// includes main, master_thread_MSG, and egress_MSG unmodified for local messages
// includes echo_MSG unmodified only for local messages, omitted for remote messages
// there will be no echo_MSG on this side for remote messages
// for remote messages egress_MSG will be modified and _rpc_echo_MSG will be generated

egress_MSG(m)
  if non_local(MSG) 
     _rpc_echo_MSG(m) 

_rpc_echo_MSG(m):
  // marshalling
  x = jsonstr2idl(MSG,m) // packing/unpacking marshalling/unmarshalling
  xdc_async_send(x)

// ----------------------------------------------------
// Client
// ----------------------------------------------------

// includes echo_MSG unmodified for remote messages
// main, slave_rpc_loop, and handle_echo_MSG are generated

handle_echo_MSG(x)
  xdc_blocking_recv(x)
  m = idl2jsonstr(MSG,x) // packing/unpacking marshalling/unmarshalling
  echo_MSG(m)

slave_rpc_loop():
  foreach MSG in remote list:
    thread(handle_echo_MSG)

  // housekeeping on thread join

main:
  slave_rpc_loop()
  
