############################################################################
# Generate GEDL for application, autogenerate cross-domain program artifacts
############################################################################

# STATUS:
# cd ~/gaps/build/apps/eridemo2020/secdesk
# source .vscode/closure_env.sh && make -f .vscode/Makefile.gedl clean

# Currently breaking LLVM IR generation because per-enclave include paths are missing
# source .vscode/closure_env.sh && make -f .vscode/Makefile.gedl preprocll | tee err

# Set or override variables from environment
# Directories
IDIR=./divvied
EDIR=./divvied-working
build_folder_create := $(shell cp -r $(IDIR) $(EDIR))

ODIR=./partitioned/$(IPCMODE)
output_folder_create := $(shell mkdir -p $(ODIR))

AUTOGENDIR := $(ODIR)/autogen
autogen_folder_create := $(shell mkdir -p $(ODIR)/autogen)

ENCLAVES=
enclaves_set := $(foreach enclave,$(sort $(dir $(wildcard $(EDIR)//*/))), $(eval ENCLAVES+=$(notdir $(enclave:%/=%))))
enclave_folders_create := $(foreach enclave,$(ENCLAVES), $(shell mkdir -p $(ODIR)/$(enclave)))

# Tools
CLANG=$(LLVM9)/bin/clang
CLANG_FLAGS=-emit-llvm -S -g
OPT=$(LLVM9)/bin/opt
LLVMLINK=$(LLVM9)/bin/llvm-link

# Build arguments
LLVM_INCLUDE=$(LLVM9)/lib/clang/9.0.0/include
CFLAGS = -O2 -Wall -Wstrict-prototypes
LIB_OBJ= $(AUTOGENDIR)/float754.o $(AUTOGENDIR)/codec.o 
INCLUDES=-I$(LLVM_INCLUDE) -I$(CLOSURE_INCLUDES) -I../autogen 

# Different case from IPCMODE, same purpose, sigh!
IPC_MODE=Multithreaded 

# Application configuration
INURI="ipc:///tmp/${PROG}sub"
OUTURI="ipc:///tmp/${PROG}pub"

############################################################################
# Check if required variables are set
############################################################################
check_defined = \
    $(strip $(foreach 1,$1, \
        $(call __check_defined,$1,$(strip $(value 2)))))
__check_defined = \
    $(if $(value $1),, \
      $(error Undefined $1$(if $2, ($2))))

$(call check_defined, OPT,  llvm opt tool)
$(call check_defined, CLANG,  clang compiler)
$(call check_defined, LLVMLINK,  llvm linker)
$(call check_defined, PYTHON, python exceutable)
$(call check_defined, PREPROCESSOR, cle preprocessor)
$(call check_defined, RPCGENERATOR, rpc generator)
$(call check_defined, IDLGENERATOR, idl generator)
$(call check_defined, AUTOGEN, codec and dfdl generator)

$(call check_defined, EDIR, input divvied directory)
$(call check_defined, ODIR, output partitioned directory)
$(call check_defined, ENCLAVES, list of enclaves/subdirectories)
$(call check_defined, CLOSURE_SCHEMAS, directory for closure schemas)
$(call check_defined, AUTOGENDIR, directory for autogenerated codec and dfdl)
$(call check_defined, IPCMODE, ipc mode to use for partitioning subdirectory)
$(call check_defined, LLVM_INCLUDE, llvm version specific includes)
$(call check_defined, CLOSURE_INCLUDES, closure cross-domain includes)
$(call check_defined, CLOSURE_LIBS, closure lib directory)
$(call check_defined, INCLUDES, include directories)
$(call check_defined, CLANG_FLAGS, clang options for LLVM IR generation)
$(call check_defined, CFLAGS, clang options for binary object creation)
$(call check_defined, LIB_OBJ, objects for closure cross-domain library)
$(call check_defined, PROG, name of application program)
$(call check_defined, LIBGEDL, libgedl.so opt pass library)
$(call check_defined, IPC_MODE, ipc mode for GEDL generator)
$(call check_defined, INURI, zmq inuri for hal configuration)
$(call check_defined, OUTURI, zmq outuri for hal configuration)

# These are defined on the fly, don't check
#$(call check_defined, ENCLAVELL, ??)
#$(call check_defined, ENCLAVEFL, ??)
#$(call check_defined, PREPROCIN, ??)

############################################################################
# GEDL generation
############################################################################
gedl: linkedll 
	cd $(ODIR) && $(OPT) -disable-output -load $(LIBGEDL) -accinfo-track -d 1 -prog $(PROG) -he ./heuristics < gedl.ll

linkedll: perencll
	$(foreach enclave,$(ENCLAVES), $(eval ENCLAVELL += $(EDIR)/$(enclave)/$(enclave).ll ))
	$(LLVMLINK) $(ENCLAVELL) -S -o $(ODIR)/gedl.ll

# determine functions imported/exported by each enclave
perencll: compEncs
	$(foreach enclave,$(ENCLAVES), $(OPT) -disable-output -load $(LIBGEDL) -llvm-test -prefix $(ODIR)/$(enclave)/ < $(EDIR)/$(enclave)/$(enclave).ll;)

# link each enclave into its own combined LL
compEncs: preprocll
	$(foreach enclave,$(ENCLAVES), $(LLVMLINK) $(shell find $(EDIR)/$(enclave) -name *.ll;) -S -o $(EDIR)/$(enclave)/$(encalve).ll;)

# preprocess each C and H file, rename them back, then compile to LLVM IR
preprocll:
	$(foreach enclave,$(ENCLAVES), $(eval PREPROCC += $(shell find $(EDIR)/$(enclave) -name *.c;)))
	$(foreach enclave,$(ENCLAVES), $(eval PREPROCH += $(shell find $(EDIR)/$(enclave) -name *.h;)))
	$(foreach p,$(PREPROCC), $(PYTHON) $(PREPROCESSOR) -s ${CLOSURE_SCHEMAS}/cle-schema.json -f $p;)
	$(foreach p,$(PREPROCH), $(PYTHON) $(PREPROCESSOR) -s ${CLOSURE_SCHEMAS}/cle-schema.json -f $p;)
	$(foreach p,$(PREPROCC), mv $(basename $p).mod.c $p;)
	$(foreach p,$(PREPROCH), mv $(basename $p).mod.h $p;)
	$(foreach p,$(PREPROCC), $(CLANG) $(CLANG_FLAGS) $(INCLUDES) $p -o $(basename $p).ll;)

# XXX: above LLVM IR generation breaks because <EDIR>/<enclave>/facilio/include is not provided
# may need to call make recursively for each enclave


############################################################################
# Autogeneration post GEDL generation
############################################################################
rpc: autogen slibs libs
	$(foreach enclave,$(ENCLAVES), $(eval ENCLAVEFL += $(EDIR)/$(enclave)/*.mod.c ))
	$(PYTHON) $(RPCGENERATOR) -o $(ODIR) -g $(ODIR)/$(PROG).gedl -i $(IPC_MODE) -a $(CLOSURE_LIBS) -n $(INURI) -t $(OUTURI) -f $(ENCLAVEFL) -x xdconf.ini

autogen: idl
	cd $(AUTOGENDIR) && $(PYTHON) $(AUTOGEN) -i "$(PROG).idl" -g bw_v1 -d $(PROG)_bw.dfdl -e codec
	cd $(AUTOGENDIR) && $(PYTHON) $(AUTOGEN) -i "$(PROG).idl" -g be_v1 -d $(PROG)_be.dfdl -e codec

idl: gedl
	$(PYTHON) $(IDLGENERATOR) -s $(CLOSURE_SCHEMAS)/gedl-schema.json -g "$(ODIR)/$(PROG).gedl" -o "$(ODIR)/autogen/$(PROG).idl" -i $(IPC_MODE)
	
slibs: $(AUTOGENDIR)/libcodecs.so 

libs: $(AUTOGENDIR)/libcodecs.a 

$(AUTOGENDIR)/libcodecs.a: $(LIB_OBJ)
	ar rcs $@ $^

$(AUTOGENDIR)/libcodecs.so: $(LIB_OBJ)
	$(CLANG) $(CFLAGS) -fPIC -shared -o $@ $<

$(AUTOGENDIR)/%.o: $(AUTOGENDIR)/%.c
	$(CLANG) $(CFLAGS) -fPIC -c $< -o $@

############################################################################
# Housekeeping
############################################################################
clean: 
	rm -rf $(EDIR) $(ODIR)

