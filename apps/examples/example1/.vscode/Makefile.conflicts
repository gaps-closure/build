IDIR=./annotated
EDIR=./annotated-working

INCLUDES=-I$(LLVM_INCLUDE) -I$(CLOSURE_INCLUDES)

CLANG_FLAGS += -I ../xdcc_echo -I ../../../amqlib 

enclaves: $(EDIR)/clejson2zinc.done 
	$(PYTHON) $(CONFLICT_ANALYZER) \
		--cle-instance $(EDIR)/cle_instance.mzn \
		--enclave-instance $(EDIR)/enclave_instance.mzn \
		--pdg-instance $(EDIR)/pdg_instance.mzn \
		--pdg-data $(EDIR)/pdg_data.csv



$(EDIR)/clejson2zinc.done: $(EDIR)/pdgraph.main.dot
	cd $(EDIR); \
	$(PYTHON) $(CLEJSON2ZINC) -f $(PROG).all.clemap.json

dot: $(EDIR)/pdgraph.main.dot

$(EDIR)/pdgraph.main.dot: $(EDIR)/$(PROG)_all.bc
	cd $(EDIR); \
	$(OPT_NODBG) -load $(LIBPDG) -dot-pdg -minizinc $(realpath $<) > make_dot.log 2>&1

conflictir: $(EDIR)/$(PROG)_all.bc

$(EDIR)/$(PROG)_all.bc: $(EDIR)/$(PROG)_all.ll
	$(LLVMAS) $(EDIR)/$(PROG)_all.ll -o $(EDIR)/$(PROG)_all.bc 

$(EDIR)/$(PROG)_all.ll: $(EDIR)/compencs.done
	$(eval ENCLAVELL += $(shell find $(EDIR) -name *.ll;))
	$(LLVMLINK) $(ENCLAVELL) -S -o $@

compencs: $(EDIR)/compencs.done

$(EDIR)/compencs.done: $(EDIR)/preproc.done
	$(foreach p,$(shell find $(EDIR) -name *.c;), $(CLANG) $(CLANG_FLAGS) $(INCLUDES) $p -o $(basename $p).ll;)
	touch $(EDIR)/compencs.done

preproc: $(EDIR)/preproc.done

# preprocess each C and H file, rename them back
$(EDIR)/preproc.done: $(EDIR)/cleancopy.done
	$(eval PREPROCC += $(shell find $(EDIR) -name *.c;))
	$(eval PREPROCH += $(shell find $(EDIR) -name *.h;))
	$(foreach p,$(PREPROCC), $(PYTHON) $(PREPROCESSOR) -s ${CLOSURE_SCHEMAS}/cle-schema.json -f $p;)
	$(foreach p,$(PREPROCH), $(PYTHON) $(PREPROCESSOR) -s ${CLOSURE_SCHEMAS}/cle-schema.json -f $p;)
	$(foreach p,$(PREPROCC), mv $(basename $p).mod.c $p;)
	$(foreach p,$(PREPROCH), mv $(basename $p).mod.h $p;)
	$(PYTHON) $(JOINCLEMAPS) $(EDIR)/$(PROG).all.clemap.json $(PREPROCC) $(PREPROCH)
	touch $(EDIR)/preproc.done

cleancopy: $(EDIR)/cleancopy.done

$(EDIR)/cleancopy.done:
	rm -rf $(EDIR) && cp -r $(IDIR) $(EDIR)
	touch $(EDIR)/cleancopy.done

clean:
	rm -rf $(EDIR) *.clemap.* *.ll *.dot *.log
