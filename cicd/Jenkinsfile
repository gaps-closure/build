
node {
    def closure_img 
    def closure_dir = "/home/closure/gaps"
    def jenkins_id = sh script: 'id -u -z', returnStdout: true
    def use_existing_img = true
    def dockerfile = "cicd/Dockerfile.ubuntu.develop.full"
    
    try {
        stage('Prepare workspace') {
            cleanWs()
	    checkout scm
        }
      
        stage('Building Closure') {
            if (use_existing_img) {
                echo "Using prebuilt image for testing"
 		closure_img = docker.image("closure_ubuntu_develop_full")
            } else {
                closure_img = docker.build("closure_ubuntu_develop_full", "-f ${dockerfile} .")
            }
        }
	
        stage('Test Example 1') {
            def example_dir = "$closure_dir/build/apps/examples/example1"
            closure_img.inside("-u 0:0") {
                sh "cd $example_dir && vstask '0 CLEAN SOURCE'"
                sh "cd $example_dir && vstask '4 BUILD PLAIN'"
                sh "cd $example_dir && vstask '1 ANNOTATE'"
		sh "cd $example_dir && cp -r .solution/refactored/* annotated/"
                sh "cd $example_dir && vstask '2 ANALYZE PARTITION CONFLICTS'"
                sh "cd $example_dir && vstask '9a DIVIDE'"
                sh "cd $example_dir && vstask '9b AUTOGEN GEDL, RPCs, IDL, Codecs'"
                sh "cd $example_dir && vstask '9c VERIFY'"
                sh "cd $example_dir && vstask '9e BUILD'"
                sh "cd $example_dir && vstask '9f EMULATE'"
            }
        }
        
        stage('Test Example 3') {
            def example_dir = "$closure_dir/build/apps/examples/example3"
            closure_img.inside("-u 0:0") {
                sh "cd $example_dir && mkdir -p annotated && cp .solution/refactored/* annotated"
                sh "cd $example_dir && . .vscode/closure_env.sh && cd annotated && make -f ../.vscode/Makefile.conflicts dot && make -f ../.vscode/Makefile.conflicts enclaves && mkdir -p ../refactored && cp topology.json ../ && make -f ../.vscode/Makefile.conflicts clean && cp -r * ../refactored"
                sh "cd $example_dir && . .vscode/closure_env.sh &&  make -f .vscode/Makefile.divvied"
                sh "cd $example_dir && . .vscode/closure_env.sh && mkdir -p partitioned; cp -r /opt/closure/heuristics ./partitioned; make -f .vscode/Makefile.gedl rpc;"
                sh "cd $example_dir && . .vscode/closure_env.sh && make -f .vscode/Makefile.verifier verify"
                sh "cd $example_dir && . .vscode/closure_env.sh && make -f .vscode/Makefile.verifier clean; make -f .vscode/Makefile.mbig build"
            }
        }

    } catch (e) {
        currentBuild.result = "FAILED"
        notifyFailed()
        throw e
    }
}
def notifyFailed() {
        emailext(to: 'acichocki', 
            body: "Project: ${env.JOB_NAME}, URL: ${env.BUILD_URL}", 
            subject: "Jenkins FAILURE: ${env.JOB_NAME}")
}
